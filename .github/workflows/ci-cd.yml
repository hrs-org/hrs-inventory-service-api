name: HRS Inventory Service CI/CD

on:
    pull_request:
        branches: [develop]
    push:
        tags:
            - "v*.*.*"

permissions:
    contents: read
    actions: read
    security-events: write
    pull-requests: write
    checks: write
    packages: read

env:
    DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
    DOTNET_NOLOGO: true

jobs:
    build:
        name: Build
        runs-on: ubuntu-latest
        steps:
            - name: Checkout code
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0

            - name: Setup .NET
              uses: actions/setup-dotnet@v4
              with:
                  dotnet-version: 8.0.x

            - name: Authenticate with GitHub Packages
              run: |
                  # Remove existing source if present, then add it
                  dotnet nuget remove source github 2>/dev/null || true
                  dotnet nuget add source --username ${{ github.actor }} \
                    --password ${{ secrets.PACKAGES_READ_TOKEN }} \
                    --store-password-in-clear-text \
                    --name github "https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json"

            - name: Restore dependencies
              run: dotnet restore HikingRentalStore.sln

            - name: Build project
              run: dotnet build HikingRentalStore.sln --configuration Release --no-restore

            - name: Create coverage directory
              run: mkdir -p ./coverage

            - name: Install dotnet-coverage tool
              run: dotnet tool install --global dotnet-coverage

            - name: Run tests with coverage
              run: |
                  dotnet-coverage collect "dotnet test HRS.Test/HRS.Test.csproj --configuration Release --no-build --verbosity normal" \
                    -f xml -o "./coverage/coverage.xml"
                    
                  dotnet test HRS.Test/HRS.Test.csproj --configuration Release --no-build \
                    --logger "trx;LogFileName=TestResults.trx" \
                    --results-directory ./coverage
                    
                  ls -la ./coverage/

            - name: Upload test results
              uses: actions/upload-artifact@v4
              if: always()
              with:
                  name: test-results
                  path: ./coverage/
                  retention-days: 7

    code-quality:
        name: Code Quality Analysis (SAST)
        runs-on: ubuntu-latest
        needs: build
        steps:
            - name: Checkout code
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0

            - name: Setup .NET
              uses: actions/setup-dotnet@v4
              with:
                  dotnet-version: 8.0.x

            - name: Install SonarCloud scanner
              run: dotnet tool install --global dotnet-sonarscanner

            - name: Authenticate with GitHub Packages
              run: |
                  dotnet nuget remove source github 2>/dev/null || true
                  dotnet nuget add source --username ${{ github.actor }} \
                    --password ${{ secrets.PACKAGES_READ_TOKEN }} \
                    --store-password-in-clear-text \
                    --name github "https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json"

            - name: Download test results
              uses: actions/download-artifact@v4
              with:
                  name: test-results
                  path: ./coverage

            - name: Begin SonarCloud analysis
              env:
                  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
              run: |
                  COVERAGE_PATH=$(readlink -f ./coverage/coverage.xml)
                  echo "Using coverage file: $COVERAGE_PATH"

                  SONAR_PARAMS=""
                  if [ "${{ github.event_name }}" = "pull_request" ]; then
                    SONAR_PARAMS="/d:sonar.pullrequest.key=${{ github.event.number }} /d:sonar.pullrequest.branch=${{ github.head_ref }} /d:sonar.pullrequest.base=${{ github.base_ref }}"
                  else
                    SONAR_PARAMS="/d:sonar.branch.name=${{ github.ref_name }}"
                  fi

                  dotnet-sonarscanner begin \
                    /k:"hrs-org_hrs-inventory-service-api" \
                    /o:"hrs-org" \
                    /d:sonar.projectBaseDir="$(pwd)" \
                    /d:sonar.token="$SONAR_TOKEN" \
                    /d:sonar.host.url="https://sonarcloud.io" \
                    /d:sonar.cs.vstest.reportsPaths="./coverage/TestResults.trx" \
                    /d:sonar.cs.vscoveragexml.reportsPaths="$COVERAGE_PATH" \
                    /d:sonar.coverage.exclusions="**/HRS.Test/**,**/*Test*.cs,**/Migrations/**,**/Program.cs" \
                    /d:sonar.exclusions="**/Migrations/**" \
                    /d:sonar.scm.disabled=true \
                    /d:sonar.qualitygate.wait=false \
                    $SONAR_PARAMS

            - name: Restore dependencies
              run: dotnet restore HikingRentalStore.sln

            - name: Build for SonarCloud analysis
              run: dotnet build HikingRentalStore.sln --configuration Release --no-restore

            - name: End SonarCloud analysis
              env:
                  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
              run: dotnet-sonarscanner end /d:sonar.token="$SONAR_TOKEN"

    lint:
        name: Lint
        runs-on: ubuntu-latest
        needs: build
        steps:
            - name: Checkout code
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0

            - name: Setup .NET
              uses: actions/setup-dotnet@v4
              with:
                  dotnet-version: 8.0.x

            - name: Authenticate with GitHub Packages
              run: |
                  # Remove existing source if present, then add it
                  dotnet nuget remove source github 2>/dev/null || true
                  dotnet nuget add source --username ${{ github.actor }} \
                    --password ${{ secrets.PACKAGES_READ_TOKEN }} \
                    --store-password-in-clear-text \
                    --name github "https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json"

            - name: Restore dependencies
              run: dotnet restore HikingRentalStore.sln

            - name: Check code formatting
              run: dotnet format HikingRentalStore.sln --verify-no-changes --verbosity diagnostic

    security-scan:
        name: Security Scan
        runs-on: ubuntu-latest
        needs: build
        steps:
            - name: Checkout code
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0

            - name: Setup .NET
              uses: actions/setup-dotnet@v4
              with:
                  dotnet-version: 8.0.x

            - name: Authenticate with GitHub Packages
              run: |
                  # Remove existing source if present, then add it
                  dotnet nuget remove source github 2>/dev/null || true
                  dotnet nuget add source --username ${{ github.actor }} \
                    --password ${{ secrets.PACKAGES_READ_TOKEN }} \
                    --store-password-in-clear-text \
                    --name github "https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json"

            - name: Restore dependencies
              run: dotnet restore HikingRentalStore.sln

            - name: Security audit
              run: dotnet list HikingRentalStore.sln package --vulnerable --include-transitive > security-audit.txt 2>&1 || true

            - name: Upload security scan results
              uses: actions/upload-artifact@v4
              if: always()
              with:
                  name: security-scan-results
                  path: security-audit.txt
                  retention-days: 7

    docker-build:
        name: Build & Push Docker Image to ACR
        runs-on: ubuntu-latest
        needs: [build, code-quality, lint, security-scan]
        if: github.event_name == 'push'
        environment: uat
        outputs:
            version: ${{ steps.version.outputs.version }}
            image-tag: ${{ steps.version.outputs.image-tag }}

        steps:
            - name: Checkout code
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0

            - name: Install Nerdbank.GitVersioning
              run: dotnet tool install --global nbgv

            - name: Determine version
              id: version
              run: |
                  if [[ "${{ github.ref }}" == refs/tags/v* ]]; then
                    # Tagged release: v1.2.3 â†’ 1.2.3
                    VERSION=${GITHUB_REF#refs/tags/v}
                    IMAGE_TAG="$VERSION"
                    echo "ðŸ“¦ Building RELEASE version: $VERSION"
                  else
                    # Development build: use valid SemVer with prerelease tag
                    SHORT_SHA=$(git rev-parse --short HEAD)
                    # Get version from nbgv, but use valid SemVer format: 1.0.1-dev.abc123
                    BASE_VERSION=$(nbgv get-version -v Version | cut -d'.' -f1-3)
                    VERSION="${BASE_VERSION}-dev.${SHORT_SHA}"
                    IMAGE_TAG="dev-${SHORT_SHA}"
                    echo "ðŸ“¦ Building DEV version: $VERSION (image tag: $IMAGE_TAG)"
                  fi

                  echo "version=$VERSION" >> $GITHUB_OUTPUT
                  echo "image-tag=$IMAGE_TAG" >> $GITHUB_OUTPUT

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v3

            - name: Log in to Azure
              uses: azure/login@v1
              with:
                  creds: ${{ secrets.AZURE_CREDENTIALS }}

            - name: Log in to Azure Container Registry
              run: |
                  az acr login --name ${{ secrets.ACR_NAME }}

            - name: Build and push Docker image
              uses: docker/build-push-action@v5
              with:
                  context: .
                  file: ./Dockerfile
                  push: true
                  build-args: |
                      VERSION=${{ steps.version.outputs.version }}
                      GITHUB_TOKEN=${{ secrets.PACKAGES_READ_TOKEN }}
                  tags: |
                      ${{ secrets.ACR_NAME }}.azurecr.io/hrs-inventory-service:${{ steps.version.outputs.image-tag }}
                      ${{ secrets.ACR_NAME }}.azurecr.io/hrs-inventory-service:latest
                      ${{ secrets.ACR_NAME }}.azurecr.io/hrs-inventory-service:${{ github.sha }}
                  labels: |
                      org.opencontainers.image.version=${{ steps.version.outputs.version }}
                      org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
                      org.opencontainers.image.revision=${{ github.sha }}
                      org.opencontainers.image.created=${{ github.event.head_commit.timestamp }}

            - name: Create deployment info
              run: |
                  mkdir -p artifacts
                  cat > artifacts/deployment-info.txt <<EOF
                  VERSION=${{ steps.version.outputs.version }}
                  IMAGE_TAG=${{ steps.version.outputs.image-tag }}
                  COMMIT_SHA=${{ github.sha }}
                  BRANCH=${{ github.ref_name }}
                  BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')
                  TRIGGERED_BY=${{ github.actor }}
                  EOF

                  echo "ðŸ“„ Deployment Info:"
                  cat artifacts/deployment-info.txt

            - name: Upload deployment info
              uses: actions/upload-artifact@v4
              with:
                  name: deployment-info
                  path: artifacts/deployment-info.txt
                  retention-days: 30

    dast:
        name: DAST Security Scan
        runs-on: ubuntu-latest
        needs: docker-build
        if: github.event_name == 'push'
        environment: uat
        steps:
            - name: Checkout code
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0

            - name: Log in to Azure
              uses: azure/login@v1
              with:
                  creds: ${{ secrets.AZURE_CREDENTIALS }}

            - name: Pull and run Docker image
              env:
                  IMAGE_TAG: ${{ needs.docker-build.outputs.image-tag }}
              run: |
                  az acr login --name ${{ secrets.ACR_NAME }}

                  echo "Image tag from docker-build: ${IMAGE_TAG}"

                  if [ -z "$IMAGE_TAG" ]; then
                    echo "ERROR: IMAGE_TAG is empty!"
                    echo "Using 'latest' as fallback"
                    IMAGE_TAG="latest"
                  fi

                  echo "Pulling image: ${{ secrets.ACR_NAME }}.azurecr.io/hrs-inventory-service:${IMAGE_TAG}"
                  docker pull ${{ secrets.ACR_NAME }}.azurecr.io/hrs-inventory-service:${IMAGE_TAG}

                  echo "Starting container..."
                  docker run -d -p 5000:80 --name hrs-inventory-service \
                    -e ASPNETCORE_ENVIRONMENT=Production \
                    -e ConnectionStrings__MongoDb="${{ secrets.MONGODB_CONNECTION_STRING }}" \
                    -e Jwt__Key="${{ secrets.JWT_SECRET_KEY }}" \
                    -e Jwt__Issuer="HRSApp" \
                    -e Jwt__Audience="HRSUsers" \
                    -e AllowedOrigins="${{ secrets.ALLOWED_ORIGINS || 'http://localhost:4200' }}" \
                    ${{ secrets.ACR_NAME }}.azurecr.io/hrs-inventory-service:${IMAGE_TAG}

                  echo "Waiting for application to start..."
                  sleep 20

                  echo "Container status:"
                  docker ps -a

                  echo "Container logs:"
                  docker logs hrs-inventory-service

                  echo "Testing health endpoint:"
                  curl -f http://localhost:5000/health || echo "Health endpoint not available"

            - name: OWASP ZAP Baseline Scan
              uses: zaproxy/action-baseline@v0.10.0
              with:
                  target: "http://localhost:5000/health"
                  cmd_options: "-a -j -l WARN -T 10 -I"
              continue-on-error: true

            - name: Upload DAST scan results
              uses: actions/upload-artifact@v4
              if: always()
              with:
                  name: dast-scan-results
                  path: |
                      report_html.html
                      report_json.json
                      report_md.md
                      report_xml.xml
                  retention-days: 7

            - name: Stop application
              if: always()
              run: |
                  docker stop hrs-inventory-service || true
                  docker rm hrs-inventory-service || true
